@using JoinRpg.DataModel
@using JoinRpg.Domain
@using JoinRpg.Web.Models.Characters
@model CharacterListViewModel
@{
  ViewBag.CountString = DisplayCount.OfX(Model.Items.Count(), "персонаж", "персонажа", "персонажей");
}

@Html.Partial("_ListOperationsDropdown", Model)

@{
  var firstItem = Model.Items.FirstOrDefault();
}

<table class="table">
    <tr>
        <th rowspan="2">
            @Html.DisplayNameFor(model => firstItem.Name)
        </th>
        <th rowspan="2">
            @Html.DisplayNameFor(model => firstItem.Player)
        </th>
        <th rowspan="2">
            @Html.DisplayNameFor(model => firstItem.Groups)
        </th>

        <th rowspan="2">@Html.DisplayNameFor(model => firstItem.Problems)</th>
        <th colspan="2">Загрузы (готовых/всего)</th>
        @foreach (var field in Model.Fields)
        {
            switch (field.FieldType)
            {
                case ProjectFieldType.Text:
                    continue;
                case ProjectFieldType.String:
                case ProjectFieldType.Dropdown:
                case ProjectFieldType.Checkbox:
                case ProjectFieldType.MultiSelect:
            <th rowspan="2">@field.FieldName</th>
                    break;
                case ProjectFieldType.Header:
            <th rowspan="2">&nbsp;</th>
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }

    </tr>
    <tr>
        <th>Личные</th>
        <th>Коллективные</th>
    </tr>

    @foreach (var item in Model.Items.OrderBy(c => c.BusyStatus).ThenBy(c => c.Name))
    {
    <tr>
        <td>
            <a href="@Url.Action(Model.HasEditAccess ? "Edit" : "Details", "Character", new {Model.ProjectId, item.CharacterId}, null)">
                @item.Name
            </a>
        </td>
        <td>
            @switch (item.BusyStatus)
            {
                case CharacterBusyStatusView.HasPlayer:
                <a href="@Url.Action("Edit", "Claim", new {Model.ProjectId, ClaimId = item.ApprovedClaimId}, null)">
                    @Html.DisplayFor(modelItem => item.Player.DisplayName)
                </a>
                    break;
                case CharacterBusyStatusView.Discussed:
                case CharacterBusyStatusView.NotSend:
                case CharacterBusyStatusView.Npc:
                @Html.DisplayFor(modelItem => item.BusyStatus)
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        </td>
        <td>
            @Html.DisplayFor(model => item.Groups)
        </td>
        <td>
            @foreach (var pr in item.Problems)
            {

                string style;
                switch (pr.Severity)
                {
                    case ProblemSeverity.Hint:
                        style = "label-info";
                        break;
                    case ProblemSeverity.Warning:
                        style = "label-warning";
                        break;
                    case ProblemSeverity.Error:
                    case ProblemSeverity.Fatal:
                        style = "label-danger";
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }

            <div class="label @style">
                @if (pr.Severity == ProblemSeverity.Fatal)
                {
                <span class="glyphicon glyphicon-exclamation-sign" title="Обратитесь в поддержку сайта"></span>
                }
                @Html.DisplayFor(modelItem => pr.ProblemType)
                @if (pr.ProblemTime != null)
                {
                @Html.DisplayFor(modelItem => pr.ProblemTime, "EventTime")
                }
                @if (!string.IsNullOrWhiteSpace(pr.Extra))
                {
                <text>: @pr.Extra</text>
                }
            </div>
                    <br />
            }
        </td>
        <td>
            @item.IndReadyPlotsCount / @item.IndAllPlotsCount
        </td>
        <td>
            @item.ColReadyPlotsCount / @item.ColAllPlotsCount
        </td>

        @foreach (var field in Model.Fields)
        {
            switch (field.FieldType)
            {
                case ProjectFieldType.Text:
                    continue;
                case ProjectFieldType.String:
                case ProjectFieldType.Dropdown:
                case ProjectFieldType.Checkbox:
                case ProjectFieldType.MultiSelect:
            <td>@item.Fields.FieldById(field.ProjectFieldId).DisplayString</td>
                    break;
                case ProjectFieldType.Header:
            <td>*</td>
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }
    </tr>
    }
</table>