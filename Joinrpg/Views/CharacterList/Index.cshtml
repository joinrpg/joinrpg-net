@using JoinRpg.DataModel
@using JoinRpg.Web.Models
@model CharacterListViewModel

<h2>@Model.Title</h2>

@Html.Partial("_ListOperationsDropdown", Model)

@{
  var firstItem = Model.Items.FirstOrDefault();
}

<p>@DisplayCount.OfX(Model.Items.Count(), "персонаж", "персонажа", "персонажей")</p>

<table class="table">
    <tr>
        <th rowspan="2">
            @Html.DisplayNameFor(model => firstItem.Name)
        </th>
        <th rowspan="2">
            @Html.DisplayNameFor(model => firstItem.Player)
        </th>
        
        <th rowspan="2">@Html.DisplayNameFor(model => firstItem.Problems)</th>
        <th colspan="2">Загрузы (готовых/всего)</th>
        @foreach (var field in Model.Fields)
        {
            switch (field.FieldType)
            {
                case ProjectFieldType.Text:
                    continue;
                case ProjectFieldType.String:
                case ProjectFieldType.Dropdown:
                case ProjectFieldType.Checkbox:
                case ProjectFieldType.MultiSelect:
            <th rowspan="2">@field.FieldName</th>
                    break;
                case ProjectFieldType.Header:
            <th rowspan="2">&nbsp;</th>
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }

    </tr>
    <tr>
        <th>Личные</th>
        <th>Коллективные</th>
    </tr>

    @foreach (var item in Model.Items.OrderBy(c => c.BusyStatus).ThenBy(c => c.Name))
    {
        <tr>
            <td>
                <a href="@Url.Action("Edit", "Character", new {Model.ProjectId, item.CharacterId}, null)">
                    @item.Name
                </a>
            </td>
            <td>
                @switch (item.BusyStatus)
                {
                    case CharacterBusyStatusView.HasPlayer:
                        <a href="@Url.Action("Edit", "Claim", new {Model.ProjectId, ClaimId = item.ApprovedClaimId}, null)">
                            @Html.DisplayFor(modelItem => item.Player)
                        </a>
                        break;
                    case CharacterBusyStatusView.Discussed:
                        <span>Обсуждается</span>
                        break;
                    case CharacterBusyStatusView.NotSend:
                        <span>Нет заявок</span>
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }
            </td>
            <td>
                @foreach (var pr in item.Problems)
                {
                    @Html.DisplayFor(modelItem => pr)
                }
            </td>
            <td>
                @item.IndReadyPlotsCount / @item.IndAllPlotsCount
            </td>
            <td>
                @item.ColReadyPlotsCount / @item.ColAllPlotsCount
            </td>

            @foreach (var field in Model.Fields)
            {
                switch (field.FieldType)
                {
                    case ProjectFieldType.Text:
                        continue;
                    case ProjectFieldType.String:
                    case ProjectFieldType.Dropdown:
                    case ProjectFieldType.Checkbox:
                    case ProjectFieldType.MultiSelect:
                <td>@item.FieldById(field.ProjectFieldId).DisplayString</td>
                        break;
                    case ProjectFieldType.Header:
                <td>*</td>
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }
            }
        </tr>
    }
</table>