@using JoinRpg.Web.App_Code
@model JoinRpg.Web.Models.GameFieldCreateViewModel

@{
    ViewBag.Title = "Добавление нового поля";
}

<h2>@ViewBag.Title</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new {@class = "control-label col-md-3"})
            <div class="col-md-9">
                @Html.EditorFor(model => model.Name, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.Name, "", new {@class = "text-danger"})
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.FieldViewType, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-3">
                @Html.EnumDropDownListFor(model => model.FieldViewType, new { @class = "form-control"})
                @Html.ValidationMessageFor(model => model.FieldViewType, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.FieldBoundTo, htmlAttributes: new {@class = "control-label col-md-3"})
            <div class="col-md-3">
                @Html.EnumDropDownListFor(model => model.FieldBoundTo, new {@class = "form-control"})
                @Html.ValidationMessageFor(model => model.FieldBoundTo, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MandatoryStatus, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.MandatoryStatus)
                @Html.ValidationMessageFor(model => model.MandatoryStatus, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsPublic, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsPublic)
                    @Html.ValidationMessageFor(model => model.IsPublic, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CanPlayerView, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                <div class="checkbox">
                    @Html.EditorFor(model => model.CanPlayerView)
                    @Html.ValidationMessageFor(model => model.CanPlayerView, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CanPlayerEdit, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                <div class="checkbox">
                    @Html.EditorFor(model => model.CanPlayerEdit)
                    @Html.ValidationMessageFor(model => model.CanPlayerEdit, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new {@class = "control-label col-md-3"})
            <div class="col-md-9">
                @Html.EditorFor(model => model.Description, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.Description, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ShowForGroups, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.MagicSelectBindGroups(model => model.ShowForGroups)
                @Html.ValidationMessageFor(model => model.ShowForGroups, "", new { @class = "text-danger" })
                @Html.DescriptionFor(model => model.ShowForGroups)
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-3 col-md-9">
                <input type="submit" value="Добавить" class="btn btn-success"/> 
                @Html.ActionLink("Назад к списку полей", "Index", new { Model.ProjectId }, new {@class="btn btn-default"})
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
