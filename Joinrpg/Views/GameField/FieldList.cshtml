@using JoinRpg.Web.App_Code
@using JoinRpg.Web.Models.FieldSetup
@using JoinRpg.Web.Models
@model IEnumerable<GameFieldEditViewModel>

@helper ShowFieldRow(GameFieldEditViewModel item)
{
    <tr>
        <td>
            <b class="@(item.IsActive ? "" : "deleted")">@Html.DisplayFor(modelItem => item.Name)</b>@Html.DisplayFor(modelItem => item.MandatoryStatus)
            <br />
            @Html.DisplayFor(modelItem => item.FieldViewType)
            <br />
            @Html.DisplayNameFor(model => model.FieldBoundTo)
            @Html.DisplayFor(model => item.FieldBoundTo)
        </td>
        <td>
            @if (item.IsPublic)
            {
                <span class="label label-primary">Публичное</span>
            }
            else if (item.CanPlayerView)
            {
                <span class="label label-info">Игроку</span>
            }
            else
            {
                <span class="label label-default">Только мастерам</span>
            }
        <br />
        @if (item.CanPlayerEdit)
        {
            <span class="label label-warning">Игрок может менять</span>
        }
    </td>
    <td class="price-table">@(item.FieldViewType.SupportsPricingOnField() && item.Price != 0 ? item.Price.ToString() : "")</td>
    <td>@item.DescriptionDisplay @item.MasterDescriptionDisplay</td>
    <td>
        @if (item.HasValueList)
        {
            <ul>
                @foreach (var value in item.DropdownValues)
                {
                    <li>
                        @(value.CharacterGroupId != null
                    ? Html.ActionLink(value.Label, "ByGroup", "CharacterList", new { item.ProjectId, value.CharacterGroupId }, null)
                    : Html.Raw(value.Label))
                </li>
            }
                @if (item.MandatoryStatus != MandatoryStatusViewType.Optional && item.IsActive)
                {
                    if (item.FieldBoundTo == FieldBoundToViewModel.Character)
                    {
                        <li>
                            (<i>
                                @Html.ActionLink("Значение не проставлено", "ByUnAssignedField", "CharacterList",
                        new { item.ProjectFieldId, item.ProjectId }, null)
                        </i>)
                    </li>
                }
                else
                {
                    <li>
                        (<i>
                            @Html.ActionLink("Значение не проставлено", "ByUnAssignedField", "ClaimList",
                    new { item.ProjectFieldId, item.ProjectId }, null)
                    </i>)
                </li>
            }
        }
            </ul>
        }
        else if (item.FieldViewType != ProjectFieldViewType.Header)
        {
            if (!item.IsActive)
            {
                if (item.WasEverUsed)
                {
                    switch (item.FieldBoundTo)
                    {
                        case FieldBoundToViewModel.Character:
                            @Html.ActionLink("Отчет (проставленные)", "ByAssignedField", "CharacterList",
                                     new { item.ProjectFieldId, item.ProjectId }, null)
                            break;
                        case FieldBoundToViewModel.Claim:
                            @Html.ActionLink("Отчет (проставленные)", "ByAssignedField", "ClaimList",
                                     new { item.ProjectFieldId, item.ProjectId }, null)
                            break;
                        default:
                            throw new ArgumentOutOfRangeException();
                    }
                }
            }
            else
            {
                <i>
                    @if (item.FieldBoundTo == FieldBoundToViewModel.Character)
                    {
                        @Html.ActionLink("Отчет по непроставленным", "ByUnAssignedField", "CharacterList",
                            new { item.ProjectFieldId, item.ProjectId }, null)
                    }
                    else
                    {
                        @Html.ActionLink("Отчет по непроставленным", "ByUnAssignedField", "ClaimList",
                            new { item.ProjectFieldId, item.ProjectId }, null)
                    }
            </i>
        }
    }
</td>
<td>
    @if (item.CanEditFields)
    {
        <div class="btn-group btn-group-sm" style="display: inline-block">
            @if (item.IsActive)
            {
                <a title="Изменить" href="@Url.Action("Edit", new { item.ProjectFieldId, item.ProjectId })"
                   class="btn btn-primary"><i class="glyphicon glyphicon-pencil"></i></a>
                <a title="Удалить" href="@Url.Action("Delete", new { item.ProjectFieldId, item.ProjectId })"
                   class="btn btn-warning"><i class="glyphicon glyphicon-trash"></i></a>
            }
            else
            {
                <a title="Восстановить" href="@Url.Action("Edit", new { item.ProjectFieldId, item.ProjectId })"
                   class="btn btn-primary"><i class="glyphicon glyphicon-heart"></i></a>
            }
        </div>
    }
</td>
<td>
    @if (item.CanEditFields)
    {
        <div class="btn-group btn-group-sm" style="display: inline-block">
            <a title="Переместить" href="#" data-toggle="modal" data-target="#fastMoveModal" data-element="@item.ProjectFieldId"
               class="btn btn-default"><i class="glyphicon glyphicon-sort"></i></a>
        </div>
        @Html.MoveControl(model => item, "Move");
    }
</td>
</tr>
}

@{
    var firstItem = Model.FirstOrDefault();
}
@if (firstItem != null)
{
    <div class="table-responsive" style="margin-top: 1em">
        <table class="table">
            <tr>
                <th>Поле</th>
                <th>Видимость</th>
                <th class="price-table">@Html.RenderPriceElement("Цена,")</th>
                <th>@Html.DisplayNameFor(model => model.DescriptionDisplay)</th>
                <th></th>
                <th style="min-width: 6em; width: 6em;"></th>
                <th style="min-width: 9em; width: 9em;"></th>
            </tr>
            @foreach (var item in Model)
            {
                @ShowFieldRow(item)
            }
        </table>
    </div>


    <div class="modal fade modaldialogforid" id="fastMoveModal" tabindex="-1" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                @using (Html.BeginForm("MoveFast", "GameField"))
                {
                    <input type="hidden" name="ProjectId" id="projectId" value="@firstItem.ProjectId" />
                    <input type="hidden" name="ProjectFieldId" id="entityId" value="0" />
                    @Html.AntiForgeryToken()
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title">Переместить</h4>
                    </div>

                    <div class="modal-body">
                        <div class="form-horizontal">
                            <div class="form-group">
                                <label class="col-md-2">Поставить после поля:</label>
                                <div class="col-md-10">
                                    <select name="afterFieldId" id="afterFieldId" class="form-control">
                                        <option value="-1" selected="selected">Поставить в начало</option>
                                        @foreach (var field in Model)
                                        {
                                            <option value="@field.ProjectFieldId">@field.Name</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="submit" class="btn btn-success">Переместить</button>
                        <button type="button" class="btn btn-default" data-dismiss="modal">Отмена</button>

                    </div>
                }
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div>
}

