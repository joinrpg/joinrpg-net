@using System.ComponentModel
@using Joinrpg.Markdown
@using JoinRpg.Web.Models
@model FieldValueViewModel

@helper ShowOptions()
{
    var selectedValues = Model.ValueList;
    foreach (var val in Model.PossibleValueList)
    {
        <option value="@val.ProjectFieldDropdownValueId"
                @(selectedValues.Contains(val) ? "selected='selected'" : "")
                title='@val.Description.ToPlainText()'>
            @val.Label
        </option>
    }
}
@helper ValidationMessage()
{
    if (Model.MandatoryStatus != MandatoryStatusViewType.Optional)
    {
        <span class="field-validation-valid text-danger" data-valmsg-for="@Model.FieldClientId" data-valmsg-replace="true"></span>
    }
}

@if (Model.FieldViewType == ProjectFieldViewType.Header)
  {
      <h4>@Model.FieldName</h4>
      <div class="help-block">
          @Model.Description
      </div>
      return;
  }
@{
    var hideClassName = !Model.IsPlayerVisible ? "world-object-hidden" : ""; 
}
<div class="form-group @hideClassName">
    <label class="control-label col-md-2">
        @if (Model.IsDeleted)
        {
            <del>@Model.FieldName</del>
        }
        else
        {
            @Model.FieldName
        }

        @Html.DisplayFor(model => model.MandatoryStatus)
        @if (ViewBag.HideCharacterClaimFieldsIcon != true)
        {<text>&nbsp;</text>
            if (Model.FieldBound == FieldBoundToViewModel.Claim)
            {
                <span class="label label-primary" title="Это поле привязано к заявке и сохранится при смене игроком роли">И</span>
            }
            if (Model.FieldBound == FieldBoundToViewModel.Character)
            {
                <span class="label label-success" title="Это поле привязано к персонажу и сохранится при смене игрока.">П</span>
            }
        }
    </label>
    <div class="col-md-10">
        @{
          MvcHtmlString requiredMsg;
          switch (Model.MandatoryStatus)
          {
              case MandatoryStatusViewType.Optional:
                  requiredMsg = new MvcHtmlString("");
                  break;
              case MandatoryStatusViewType.Recommended:
                  //TODO improve
                  requiredMsg = new MvcHtmlString("");
                  break;
              case MandatoryStatusViewType.Required:
                  requiredMsg = new MvcHtmlString("data-val=true data-val-required=\"Необходимо заполнить поле.\"");
                  break;
              default:
                  throw new ArgumentOutOfRangeException();
          }
          var isEmpty = string.IsNullOrWhiteSpace(Model.Value);
        }

        @switch (Model.FieldViewType)
        {
            case ProjectFieldViewType.Text:
                <textarea class="form-control" cols="100" id="@Model.FieldClientId" name="@Model.FieldClientId" @requiredMsg rows="4">@(Model == null ? "" : Model.Value)</textarea>
                break;
            case ProjectFieldViewType.Dropdown:
                <select name="@Model.FieldClientId" id="@Model.FieldClientId" class="form-control" @requiredMsg>
                    @{
                        if (isEmpty || Model.MandatoryStatus != MandatoryStatusViewType.Required)
                        {
                            <option value="" @(isEmpty ? "selected='selected'" : "")>(не установлено)</option>
                        }
                        @ShowOptions()
                    }
                </select>
                break;
            case ProjectFieldViewType.String:
                <input id="@Model.FieldClientId" name="@Model.FieldClientId" value="@Model.Value" type="text" class="form-control" @requiredMsg>
                break;
            case ProjectFieldViewType.Checkbox:
                var ch = Model.IsCheckboxSet() ? "checked" : "";
                <input id="@Model.FieldClientId" name="@Model.FieldClientId" type="checkbox" @ch>
                <input name="@Model.FieldClientId" type="hidden" value="false" />
                break;
            case ProjectFieldViewType.MultiSelect:
                <select name="@Model.FieldClientId" id="@Model.FieldClientId" class="form-control" multiple="multiple" @requiredMsg>
                    @{
                        if (isEmpty || Model.MandatoryStatus != MandatoryStatusViewType.Required)
                        {
                            <option value="" @(isEmpty ? "selected='selected'" : "")>(не установлено)</option>
                        }
                        @ShowOptions()
                    }
                </select>
                <p class="help-block">Используйте Ctrl, чтобы выбрать несколько значений.</p>
                break;
            default:
                throw new InvalidEnumArgumentException("Unknown field type name");
        }
        @ValidationMessage()
        @if (!string.IsNullOrWhiteSpace(Model.Description.ToString()))
        {
            <div class="help-block">@Model.Description </div>
        }
        @Html.ValidationMessageFor(model => model.Value, "", new {@class = "text-danger"})
    </div>

</div>