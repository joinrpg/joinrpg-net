@using JoinRpg.PrimitiveTypes

<FormRow Label="Видимость">
  <EnumRadioButtonGroup @bind-SelectedValue="@characterVisibility" Name="@(Name + ".CharacterVisibility")" />
</FormRow>

<FormRow Label="Тип Персонажа">
  @if (!EditTypeDisabled)
  {
      <EnumRadioButtonGroup @bind-SelectedValue="@characterType" Name="@(Name + ".CharacterType")" />
  }
  else
  {
    <label>@characterType.GetDisplayName()</label>
    <input type="hidden" value="@characterType" Name="@(Name + ".CharacterType")" />
    if (IsDefaultTemplate)
    {      
      <InfoIcon Title="Нельзя изменить тип персонажа, т.к. это шаблон по умолчанию для заявок. Это можно поменять в настройках" /> 
    }
    else if (!CharactersHaveNameField)
    {
      <InfoIcon Title="Если имя персонажа привязано к игроку, в проекте можно создавать только шаблоны персонажей (другие типы персонажей создавать нельзя)" />
    }
    else if (ActiveClaimsCount > 0)
    {
      <InfoIcon Title="Нельзя изменить тип персонажа, т.к. на него уже есть заявки" />
    }
  }
</FormRow>

@if (characterType == CharacterTypeView.Slot)
{
  <FormRow Label="Лимит персонажей для шаблона" Description="Оставьте пустым, чтобы не ограничивать число персонажей, которые могут быть созданы из этого шаблона.">
    <NumberInput @bind-Value="@characterSlotLimit" name="@(Name + ".SlotLimit")" Min="0"/>
  </FormRow>

  @if (!CharactersHaveNameField)
  {
      <FormRow Label="Название шаблона персонажей" >
        <StringInput @bind-Value="@slotName" name="@(Name + ".SlotName")" Required="true" />
      </FormRow>
  }
}

@if (!HasApprovedClaim && (characterType == CharacterTypeView.Player || characterType == CharacterTypeView.Slot))
{
  <FormRow Label="Горячая роль" Description="Горячая роль специальным образом выделяется в ролевке">
    <CheckboxInput @bind-Value="@isHot" Name="@(Name + ".IsHot")" />
  </FormRow>
}

@code {

    [Parameter]
    public CharacterTypeInfo InitialModel { get; set; } = CharacterTypeInfo.Default();

    [Parameter]
    public int ActiveClaimsCount { get; set; } = 0;

    [Parameter]
    public bool HasApprovedClaim { get; set; } = false;

    [Parameter]
    public bool IsDefaultTemplate { get; set; } = false;

    [Parameter] public bool CharactersHaveNameField { get; set; } = true;

    [Parameter]
    public string Name { get; set; } = "CharacterTypeInfo";

    private bool EditTypeDisabled => ActiveClaimsCount > 0 || IsDefaultTemplate || !CharactersHaveNameField;

    private CharacterTypeView characterType;
    private CharacterVisibilityView characterVisibility;
    private bool isHot;
    private int? characterSlotLimit;
    private string? slotName;

    private void IsHotChanged()
    {
        isHot = !isHot;
    }

    protected override void OnInitialized()
    {
        ArgumentNullException.ThrowIfNull(InitialModel);

        CharacterType ct;
        (ct, isHot, characterSlotLimit, bool x, slotName, _, _) = InitialModel;

        if (!CharactersHaveNameField && ActiveClaimsCount == 0)
        {
            // We are creating or editing character without claims in project that have no name field
            // We can create ONLY slots in thus projects
            ct = CharacterType.Slot;
        }

        characterType = (CharacterTypeView)ct;
        characterVisibility = (CharacterVisibilityView)InitialModel.CharacterVisibility;
    }

}
