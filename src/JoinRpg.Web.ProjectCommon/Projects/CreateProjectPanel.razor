@inject ILogger<CreateProjectPanel> logger
@inject NavigationManager NavigationManager
@inject IServiceProvider Services
@implements IDisposable

<JoinAlert Variation="VariationStyleEnum.Success">
    Наш сайт — бесплатен для игроков и мастеров, на нем нет рекламы.
    Хостинг, а иногда и другие расходы оплачиваются из пожертвований.
    Мы были бы очень благодарны, если бы вы сочли возможным повысить ваш взнос всего на 20, 50 или 100 рублей
    и <a href="/home/howtohelp">пожертвовать эти деньги</a> на наш сайт.
    Так мы сможем покрыть расходы на хостинг, не залезая в личные деньги, а при удаче — и отложить что-то на развитие.
</JoinAlert>

@if (creating)
{
    <JoinLoadingMessage Message="Проект создается..."/>
    return;
}

@if (created is not null)
{
    <JoinAlert Variation="VariationStyleEnum.Danger">
        Проект был создан, вы можете перейти на <a href="/@(created.Value)/home">страницу проекта</a>.
        При настройке проекта согласно вашим запросам произошла ошибка. Обратитесь в техподдержку и/или проверьте настройки проекта вручную.
        <br> 
        @createErrorResult
    </JoinAlert>
    return;
}

<JoinRulesPanel />

<JoinPanel>
    <Header>Создание новой базы заявок</Header>
    <Body>
        <EditForm FormName="CreateProject" EditContext="@editContext" OnValidSubmit="HandleValidSubmit">
            <FormHorizontal>
                <ValidationSummary />
                <DataAnnotationsValidator />    
                <FormRowFor For="@(() => Model.ProjectName)">
                    <JoinTextInput @bind-Value="Model.ProjectName" />
                </FormRowFor>
                <FormRowFor For="@(() => Model.RulesApproved)">
                    <CheckboxInput @bind-Value="Model.RulesApproved" />
                </FormRowFor>
                <FormRowFor For="@(() => Model.ProjectType)">
                    <EnumRadioButtonGroup @bind-SelectedValue="Model.ProjectType"/>
                    <JoinAlert Variation="VariationStyleEnum.Info">Все настройки можно будет изменить после создания проекта.</JoinAlert>
                </FormRowFor>
                <FormRowFor For="@(() => Model.CopyFromProjectId)" hidden="@(Model.ProjectType != ProjectTypeViewModel.CopyFromAnother)">
                    <ProjectSelector @bind-ProjectId="Model.CopyFromProjectId" Criteria="ProjectSelectionCriteria.ForCloning" />
                </FormRowFor>
                <FormRowFor For="@(() => Model.CopySettings)" hidden="@(Model.ProjectType != ProjectTypeViewModel.CopyFromAnother)">
                    <EnumRadioButtonGroup @bind-SelectedValue="Model.CopySettings" />
                </FormRowFor>
                <FormRow>
                    <JoinButton Preset="ButtonPreset.Create" Submit="true" Disabled="@formInvalid" />
                </FormRow>
            </FormHorizontal>
        </EditForm>
    </Body>
</JoinPanel>


@code {

    private EditContext? editContext;
    private bool formInvalid = true;
    private bool creating = false;
    private ValidationMessageStore? messageStore;
    private ProjectIdentification? created;
    private string? createErrorResult;

    [Parameter]
    [EditorRequired]
    [SupplyParameterFromForm]
    public ProjectCreateViewModel Model { get; set; } = null!;

    protected override void OnInitialized()
    {
        Model ??= new();
        editContext = new(Model);
        editContext.OnValidationRequested += HandleValidationRequested;
        editContext.OnFieldChanged += HandleFieldChanged;
        messageStore = new(editContext);

        logger.LogInformation("Setup everything");
    }

    private void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (editContext is not null)
        {
            formInvalid = !editContext.Validate();
            StateHasChanged();
        }
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        messageStore?.Clear();

        // Custom validation logic
        if (Model.ProjectType == ProjectTypeViewModel.CopyFromAnother)
        {
            if (Model.CopyFromProjectId is null)
            {
                messageStore?.Add(() => Model.CopyFromProjectId!, "Необходимо выбрать проект, откуда копировать");
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        try {
            creating = true;
            var result = await Services.GetRequiredService<IProjectCreateClient>().CreateProject(Model);
            if (result.Error is null && result.ProjectId is ProjectIdentification id)
            {
                NavigationManager.NavigateTo($"/{id.Value}/home", forceLoad: true);
            }
            else
            {
                if (result.ProjectId is not null)
                {
                    created = result.ProjectId;
                }
                createErrorResult = result.Error ?? "Неизвестная серверная ошибка при создании проекта";
                creating = false;
            }
        }
        catch
        {
            messageStore?.Add(() => Model, "Неизвестная серверная ошибка при создании проекта");
            creating = false;
        }
    }

    public void Dispose()
    {
        if (editContext is not null)
        {
            editContext.OnFieldChanged -= HandleFieldChanged;
            editContext.OnValidationRequested -= HandleValidationRequested;
        }
    }

}
