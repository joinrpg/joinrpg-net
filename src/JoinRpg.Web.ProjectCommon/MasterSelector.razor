@using JoinRpg.PrimitiveTypes
@inject IMasterClient client

@if (items is null)
{
   <JoinLoadingMessage />
}
else
{
  <IntSelector
               Name="@Name"
               SelectedValues="@Selected"
               SelectedValuesChanged="@HandleSelectedChanged"
               PossibleValues="items"
               Multiple="false"
               />
}

@code {

    [Parameter] public string? Name { get; set; } = null;
    [Parameter] public int ProjectId { get; set; }
    [Parameter] public int? MasterId { get; set; }
    [Parameter] public EventCallback<int?> MasterIdChanged { get; set; }

    [Parameter] public MasterViewModel? Master{ get; set; }
    [Parameter] public EventCallback<MasterViewModel?> MasterChanged { get; set; }

    private int[] Selected { get; set; } = new int[0];
    private IntSelectListItem[] items = null!;
    private List<MasterViewModel> masters = null!;

    protected override async Task OnInitializedAsync()
    {
        masters = await client.GetMasters(ProjectId);
        items = masters
          .Select(master =>
            new IntSelectListItem(
              Value: master.MasterId,
              Text: master.DisplayName.DisplayName,
              Subtext: master.DisplayName.FullName ?? "",
              ExtraSearch: master.DisplayName.FullName ?? ""))
           .ToArray();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (MasterId is not null)
        {
            Selected = new int[] { MasterId.Value };
        }
        else if (Master is not null)
        {
            Selected = new int[] { Master.MasterId };
        }
    }

    private async Task HandleSelectedChanged(int[] values)
    {
        int? id = values.Length == 0 ? null : values.Single();
        var master = masters.SingleOrDefault(m => m.MasterId == id);
        await MasterIdChanged.InvokeAsync(id);
        await MasterChanged.InvokeAsync(master);
    }
}
