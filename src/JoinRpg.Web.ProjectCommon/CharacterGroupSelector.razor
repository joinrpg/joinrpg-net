@using System.Linq.Expressions
@inject ICharacterGroupsClient groupsClient

@if (items is null)
{
   <JoinLoadingMessage />
}
else
{
    int[] initial = SelectedGroupIds is not null ? [.. SelectedGroupIds.Select(x => x.CharacterGroupId)] : [];
  <IntSelector
               Name="@Name"
              SelectedValues="@initial"
               SelectedValuesChanged="SelectedValuesChanged"
               PossibleValues="items"
               Multiple="@Multiple"
               />
  <p>
    @if (SelectedGroupNames.Length > 1)
    {
      @string.Join(" • ", SelectedGroupNames)
    }
  </p>
}

@code {

    [Parameter] public string? Name { get; set; } = null;
    [Parameter] public int ProjectId { get; set; }
    [Parameter] public CharacterGroupIdentification[] SelectedGroupIds { get; set; } = []; 
    [Parameter] public EventCallback<CharacterGroupIdentification[]> SelectedGroupIdsChanged { get; set; }
    [Parameter] public Expression<Func<CharacterGroupIdentification[]?>>? SelectedGroupIdsExpression { get; set; }

    [Parameter] public EventCallback<CharacterGroupDto[]> SelectedGroupsChanged { get; set; }
    [Parameter] public bool Multiple { get; set; } = true;

    public string[] SelectedGroupNames { get; private set; } = [];

    private IntSelectListItem[] items = null!;
    private List<CharacterGroupDto> groups = null!;
    private FieldIdentifier? fieldIdentifier = null;

    private async Task SelectedValuesChanged(int[] values)
    {
        var selectedItems = groups.Where(item => values.Contains(item.CharacterGroupId.CharacterGroupId)).ToArray();
        RefreshSelectedNames(selectedItems);
        await SelectedGroupIdsChanged.InvokeAsync(selectedItems.Select(x => x.CharacterGroupId).ToArray());
        await SelectedGroupsChanged.InvokeAsync(selectedItems);
    }

    private void RefreshSelectedNames(CharacterGroupDto[] val)
    {
        SelectedGroupNames = val.Select(item => item.Name).ToArray();
    }

    protected override async Task OnInitializedAsync()
    {
        groups = await groupsClient.GetCharacterGroups(ProjectId);
        
        items = groups
          .Select(group =>
            new IntSelectListItem(
              Value: group.CharacterGroupId.CharacterGroupId,
              Text: group.Name,
              Subtext: string.Join("→", group.FullPath),
              ExtraSearch: string.Join(" ", group.FullPath))).ToArray();
        
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        var selectedItems = groups.Where(item => SelectedGroupIds.Contains(item.CharacterGroupId)).ToArray();
        if (SelectedGroupIdsExpression is not null)
        {
            fieldIdentifier = FieldIdentifier.Create(SelectedGroupIdsExpression);
            Name ??= fieldIdentifier.Value.FieldName;
        }
        RefreshSelectedNames(selectedItems);
    }
}
