@inject ICharacterGroupsClient groupsClient

@if (items is null)
{
   <JoinLoadingMessage />
}
else
{
  <IntSelector
               Name="@Name"
             SelectedValues="SelectedGroupIds"
               SelectedValuesChanged="SelectedValuesChanged"
               PossibleValues="items"
               Multiple="@Multiple"
               />
  <p>

    @string.Join(" • ", SelectedGroupNames)
  </p>
}

@code {

    [Parameter] public string? Name { get; set; } = null;
    [Parameter] public int ProjectId { get; set; }
    [Parameter] public int[] SelectedGroupIds { get; set; } = new int[0];
    [Parameter] public EventCallback<int[]> SelectedGroupIdsChanged { get; set; }
    [Parameter] public EventCallback<CharacterGroupDto[]> SelectedGroupsChanged { get; set; }
    [Parameter] public bool Multiple { get; set; } = true;

    public IEnumerable<string> SelectedGroupNames { get; private set; } = Array.Empty<string>();

    private IntSelectListItem[] items = null!;
    private List<CharacterGroupDto> groups = null!;

    private async Task SelectedValuesChanged(int[] values)
    {
        var selectedItems = groups.Where(item => values.Contains(item.CharacterGroupId)).ToArray();
        RefreshSelectedNames(selectedItems);
        await SelectedGroupIdsChanged.InvokeAsync(values);
        await SelectedGroupsChanged.InvokeAsync(selectedItems);
    }

    private void RefreshSelectedNames(CharacterGroupDto[] val)
    {
        SelectedGroupNames = val.Select(item => item.Name);
    }

    protected override async Task OnInitializedAsync()
    {
      groups = await groupsClient.GetCharacterGroups(ProjectId);
      var selectedItems = groups.Where(item => SelectedGroupIds.Contains(item.CharacterGroupId)).ToArray();
      items = groups
        .Select(group =>
          new IntSelectListItem(
            Value: group.CharacterGroupId,
            Text: group.Name,
            Subtext: string.Join("→", group.FullPath),
            ExtraSearch: string.Join(" ", group.FullPath))).ToArray();
        RefreshSelectedNames(selectedItems);
    }
}
