
@model JoinRpg.Web.Models.Characters.EditCharacterViewModel
@section Scripts {
    <script src="~/Scripts/claim.js"></script>
}


@{
    ViewBag.Title = Model.ProjectName + ": Редактирование персонажа: " + Model.Name;
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="panel panel-default">
        <div class="panel-heading">
            @await Html.PartialAsync("CharacterNavigation", Model.Navigation)
        </div>
        <div class="panel-body">

            <div class="form-horizontal">

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                @Html.HiddenFor(model => model.CharacterId)
                @Html.HiddenFor(model => model.ProjectId)

                <div class="form-group">
                    <span class="control-label col-md-2"><b>История обновлений</b> </span>
                    <div class="col-md-10">
                        <div class="help-block">
                            @await Html.PartialAsync("CreateUpdated", Model)
                        </div>
                    </div>
                </div>

                @if (Model.LegacyNameMode)
                {

                    <div class="form-group">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                            @Html.DescriptionFor(model => model.Name)
                        </div>
                    </div>
                }

                <div class="form-group">
                    @Html.LabelFor(model => model.IsPublic, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.IsPublic)
                        @Html.DescriptionFor(model => model.IsPublic)
                    </div>

                </div>

                @if (Model.IsAcceptingClaimsEnabled)
                {

                    <div class="form-group">

                        @Html.LabelFor(model => model.IsAcceptingClaims, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.IsAcceptingClaims)
                            @Html.DescriptionFor(model => model.IsAcceptingClaims)
                        </div>
                    </div>
                }

                <div class="form-group">

                    @Html.LabelFor(model => model.HidePlayerForCharacter, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.HidePlayerForCharacter)
                        @Html.DescriptionFor(model => model.HidePlayerForCharacter)
                    </div>
                </div>

                <div class="form-group">

                    @Html.LabelFor(model => model.IsHot, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.IsHot)
                        @Html.DescriptionFor(model => model.IsHot)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ParentCharacterGroupIds, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-8">
                        @Html.MagicSelectParent(model => model.ParentCharacterGroupIds)
                        @Html.ValidationMessageFor(model => model.ParentCharacterGroupIds, "", new { @class = "text-danger" })
                    </div>
                </div>

                @await Html.PartialAsync("_EditFieldsPartial", Model.Fields)

                @if (Model.Fields.Fields.Any(f => f.HasPrice))
                {
                    @await Html.PartialAsync("_CharacterFieldsSubtotal", Model.Fields)
                }

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit"
                               value="@(Model.IsActive ? "Сохранить персонажа" : "Восстановить персонажа")"
                               class="btn btn-success" />

                        @if (Model.IsActive & Model.ActiveClaimsCount == 0)
                        {
                            <a href="@Url.Action("Delete", "Character", new {Model.ProjectId, Model.CharacterId}, null)" class="btn btn-danger">
                                <span title="удалить" class="glyphicon glyphicon-trash"></span> Удалить персонажа
                            </a>
                        }
                    </div>
                </div>
            </div>

        </div>
    </div>
}

