@using System.Linq.Expressions;
@using JoinRpg.Helpers
@typeparam T
@if (ChildContent == null)
{
  <label @attributes="@InputAttributes" class="@BootstrapStyle.Build("label", Variation, Size)">@label</label>
}
else
{
  <label @attributes="@InputAttributes" class="@BootstrapStyle.Build("label", Variation, Size)">
    @label
    @ChildContent
  </label>
}
@code {
    [Parameter] public Expression<Func<T>> For { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public VariationStyleEnum? Variation { get; set; }
    [Parameter] public SizeStyleEnum? Size { get; set; }


    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> InputAttributes { get; set; }

    private string label {
      get {
        var property = For.AsPropertyAccess();
        if (property is null)
        {
          throw new ArgumentException("Expression should be property access", nameof(For));
        }
        return property.GetDisplayName();
      }
    }
}
