@using System.Collections.Frozen
@using System.Diagnostics
@using JoinRpg.WebComponents.Dialog

@if (Link is not null)
{
  <Tooltip Title="@Title">
        <a href="@Link" class="@RenderedStyle" type="@ButtonType" disabled="@Disabled">@LabelContent</a>
  </Tooltip>
}
else
{
  <Tooltip Title="@ActualTitle">
    <button class="@RenderedStyle" type="@ButtonType" disabled="@Disabled" @onclick="OnClickHappened">@LabelContent</button>
  </Tooltip>
}
@if (AutoConfirm)
{
    DialogButton[] dialogButtons = [DialogButton.FromJoinButton(this), new DialogButton(ButtonPreset.Cancel)];
    <JoinMessageDialog
      @ref="_confirmDialogRef"
      Type="@MessageDialogType.Confirmation"
      Caption="@DialogCaption"
      Buttons="dialogButtons"
    >
      @AutoConfirmMessage
    </JoinMessageDialog>
}
@code {
    /// <summary>
    /// Button link.
    /// </summary>
    [Parameter]
    public string? Link { get; set; }

    /// <summary>
    /// Button style.
    /// </summary>
    /// <remarks>This member is obsolete. Use <see cref="Style"/> instead.</remarks>
    /// <seealso cref="VariationStyleEnum"/>
    [Parameter]
    [Obsolete("Use Style instead")]
    public VariationStyleEnum? Variation { get => Style; set => Style = value; }

    /// <summary>
    /// Button style.
    /// </summary>
    /// <seealso cref="VariationStyleEnum"/>
    [Parameter]
    public VariationStyleEnum? Style { get; set; }

    /// <summary>
    /// Button size.
    /// </summary>
    /// <seealso cref="SizeStyleEnum"/>
    [Parameter]
    public SizeStyleEnum? Size { get; set; }

    /// <summary>
    /// When true and <see cref="Link"/> is null, button is rendered as form submit button.
    /// </summary>
    [Parameter]
    public bool Submit { get; set; }

    /// <summary>
    /// When true, button is rendered disabled.
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; }

    /// <summary>
    /// The pop-up hint text will be shown when mouse is over the button.
    /// </summary>
    [Parameter]
    public string? Title { get; set; }

    /// <summary>
    /// When <see cref="Disabled"/> is true, a value from this property will be used instead of <see cref="Title"/> for the pop-up hint.
    /// </summary>
    [Parameter]
    public string? DisabledTitle { get; set; }

    /// <summary>
    /// Preconfigured button type.
    /// </summary>
    /// <seealso cref="ButtonPreset"/>
    [Parameter]
    public ButtonPreset Preset { get; set; } = ButtonPreset.None;

    /// <summary>
    /// When true, the confirmation dialog appears when user clicks the button.
    /// </summary>
    [Parameter]
    public bool AutoConfirm { get; set; }

    /// <summary>
    /// Automatic confirmation dialog message. Required when <see cref="AutoConfirm"/> is true.
    /// </summary>
    [Parameter]
    public string? AutoConfirmMessage { get; set; }

    /// <summary>
    /// Button label.
    /// </summary>
    [Parameter]
    public string? Label { get; set; }

    /// <summary>
    /// Icon name from the built-in glyphicon collection or another style class name.
    /// This icon will be rendered in normal and disabled states.
    /// </summary>
    [Parameter]
    public string? Icon { get; set; }

    /// <summary>
    /// When true, button is rendered as in progress state.
    /// Set this property initially to true to display button in progress state from the very beginning.
    /// </summary>
    [Parameter]
    public bool InProgress { get; set; }

    /// <summary>
    /// When true, button will be automatically switched into progress state when clicked by user.
    /// </summary>
    [Parameter]
    public bool AutoProgress { get; set; } = true; // true is for backward compatibility here

    /// <summary>
    /// Button label to be used in progress state.
    /// </summary>
    /// <remarks>This member is obsolete. Use <see cref="ProgressLabel"/> instead.</remarks>
    [Parameter]
    [Obsolete("Use ProgressLabel instead")]
    public string? ProgressText { get => ProgressLabel; set => ProgressLabel = value; }

    /// <summary>
    /// Button label to be used in progress state.
    /// </summary>
    [Parameter]
    public string? ProgressLabel { get; set; }

    /// <summary>
    /// Icon name from the built-in glyphicon collection or another style class name.
    /// This icon will be rendered in progress state.
    /// </summary>
    [Parameter]
    public string? ProgressIcon { get; set; } = DefaultProgressIcon;

    /// <summary>
    /// Default icon to render in progress state.
    /// </summary>
    public const string DefaultProgressIcon = "glyphicon-hourglass";

    /// <summary>
    /// Invoked when user clicks a button somehow.
    /// </summary>
    [Parameter]
    public EventCallback<ButtonClickEventArgs> OnClick { get; set; }


    private JoinMessageDialog? _confirmDialogRef;

    private string ButtonType => Submit ? "submit" : "button";
    private string RenderedStyle => BootstrapStyle.Build("btn", ActualStyle, Size);
    private bool PreventSubmit => Disabled || InProgress;
    private string? ActualTitle => Disabled ? DisabledTitle ?? Title : Title;

    private RenderFragment LabelContent => InProgress ? ProgressContent : NormalContent;

    private RenderFragment NormalContent { get; set; } = null!;
    private RenderFragment ProgressContent { get; set; } = null!;
    private VariationStyleEnum ActualStyle { get; set; }
    private string? DialogCaption { get; set; }

    [CascadingParameter]
    public EditContext? CascadingEditContext { get; set; }


    private async Task OnClickHappened(MouseEventArgs e)
    {
        if (PreventSubmit)
            return;
        await DoClick(e);
    }

    private async Task DoClick(MouseEventArgs e)
    {
        if (AutoProgress)
        {
            InProgress = true;
        }

        var confirmed = true;
        if (AutoConfirm)
        {
            Debug.Assert(_confirmDialogRef is not null);
            confirmed = await _confirmDialogRef.ShowBoolModalAsync();
        }

        var args = new ButtonClickEventArgs { MouseEvent = e };
        if (confirmed)
        {
            await OnClick.InvokeAsync(args);
            // TODO: Do we have to catch an error somehow and render button in some invalid operation result style?
        }

        if (args.ExitProgressState is true || AutoProgress && !confirmed)
        {
            InProgress = false;
        }

        if (args.EnterDisabledState)
        {
            Disabled = true;
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (Disabled)
        {
            OnClick = EventCallback<ButtonClickEventArgs>.Empty;
            Link = null;
        }

        if (Link is not null && OnClick.HasDelegate)
        {
            throw new InvalidOperationException($"The {nameof(OnClick)} event handler and {nameof(Link)} property can not be both set in the same time");
        }

        AutoConfirmMessage ??= Title;

        if (AutoConfirm && string.IsNullOrWhiteSpace(AutoConfirmMessage))
        {
            throw new InvalidOperationException($"The {nameof(AutoConfirmMessage)} is required when {nameof(AutoConfirm)} is true");
        }

        var presetContent = Presets[Preset];
        NormalContent = FormatLabel(Label, presetContent.Normal.Label, Icon, presetContent.Normal.Icon);
        ProgressContent = FormatLabel(ProgressLabel, presetContent.Progress.Label ?? Label, ProgressIcon, presetContent.Progress.Icon);
        ActualStyle = Style ?? presetContent.Style;
        DialogCaption = Label?.Trim() ?? presetContent.Normal.Label ?? "Подтверждение";

        if (CascadingEditContext is not null)
        {
            CascadingEditContext.OnValidationStateChanged += EditContextValidationStateChanged;
        }
    }

    public void EditContextValidationStateChanged(object? sender, ValidationStateChangedEventArgs? _)
    {
        if (InProgress)
        {
            InProgress = false; // Валидация закончилась, значит сабмит прошел
            StateHasChanged();
        }
        
    }

    private static RenderFragment FormatLabel(string? label, string? icon)
    {
      return (string.IsNullOrEmpty(label), string.IsNullOrEmpty(icon)) switch
      {
        (false, false) => @<text><span class="glyphicon @icon"></span>&nbsp;@label</text>,
        (false, true) => @<text>@label</text>,
        (true, false) => @<text><span class="glyphicon @icon"></span></text>,
        _ => @<text>INVALID BUTTON</text>,
      };
    }

    internal static RenderFragment FormatLabel(string? customLabel, string? defaultLabel, string? customIcon, string? defaultIcon)
    {
      return FormatLabel(customLabel?.Trim() ?? defaultLabel, customIcon?.Trim() ?? defaultIcon);
    }

    // for tests
    internal static readonly FrozenDictionary<ButtonPreset, ButtonPresetContent> Presets = new Dictionary<ButtonPreset, ButtonPresetContent>
    {
        { ButtonPreset.None, new(null, null) },
        { ButtonPreset.Add, new("Добавить", "Добавляем...", "glyphicon-plus") },
        { ButtonPreset.Ok, new("Ok", null) },
        { ButtonPreset.Yes, new("Да",  null) },
        { ButtonPreset.No, new("Нет", null) },
        { ButtonPreset.Cancel, new("Отменить", "Отменяем...") },
        { ButtonPreset.Create, new("Создать", "Создаем...", "glyphicon-ok", VariationStyleEnum.Success) },
        { ButtonPreset.Delete, new("Удалить", "Удаляем...", "glyphicon-trash", VariationStyleEnum.Danger) },
        { ButtonPreset.Download, new("Скачать", "Скачиваем...", "glyphicon-cloud-download") },
        { ButtonPreset.Update, new("Обновить", "Обновляем...", "glyphicon-refresh") },
        { ButtonPreset.Hide, new("Скрыть", "Скрываем...", "glyphicon-remove-sign", VariationStyleEnum.Info) },
        { ButtonPreset.Restore, new("Восстановить", "Восстанавливаем...", style: VariationStyleEnum.Success) },
        { ButtonPreset.Print, new("Напечатать", "Печатаем...", "glyphicon-print") },
        { ButtonPreset.Email, new("Написать", "Отправляем письмо...", "glyphicon-envelope") },
        { ButtonPreset.Publish, new("Опубликовать", "Публикуем...", "glyphicon-share-alt", VariationStyleEnum.Success) },
        { ButtonPreset.Copy, new("Копировать", "Копируем...", "glyphicon-duplicate") },
        { ButtonPreset.Up, new(null, null, "glyphicon-arrow-up") },
        { ButtonPreset.Down, new(null, null, "glyphicon-arrow-down") },
        { ButtonPreset.Edit, new("Изменить", null, "glyphicon-pencil") },
        { ButtonPreset.Setup, new("Настройки", null, "glyphicon-cog") },
        { ButtonPreset.Save, new("Сохранить", "Сохраняем...", "glyphicon-ok", VariationStyleEnum.Success) },
        { ButtonPreset.Understand, new("Понятно", null) },
        { ButtonPreset.Logout, new("Выйти", "Выходим...", normalIcon: null, VariationStyleEnum.Danger) },
        { ButtonPreset.Login, new("Войти", "Входим...", normalIcon: null, VariationStyleEnum.Success) },
        { ButtonPreset.Vkontakte, new("ВКонтакте", "Входим...", normalIcon: null, VariationStyleEnum.Info) },
        { ButtonPreset.Unlink, new("Отвязать","Отвязываем...", "glyphicon-remove-sign", VariationStyleEnum.Info)},
        { ButtonPreset.Link, new("Привязать","Привязываем...", "glyphicon-plus", VariationStyleEnum.Info)},
        { ButtonPreset.Claim, new("Заявка",null, "glyphicon-file", VariationStyleEnum.Info)},
        { ButtonPreset.Profile, new("Профиль",null, "glyphicon-user", VariationStyleEnum.Info)},
        { ButtonPreset.Donate, new("Отослать донат",null, "glyphicon-usd", VariationStyleEnum.Success)},
    }.ToFrozenDictionary();

    internal record struct ButtonContent(string? Label, string? Icon);

    internal record struct ButtonPresetContent(ButtonContent Normal, ButtonContent Progress, VariationStyleEnum Style)
    {
        public ButtonPresetContent(
          string? normalLabel,
          string? progressLabel,
          string? normalIcon = null,
          VariationStyleEnum style = VariationStyleEnum.None,
          string? progressIcon = DefaultProgressIcon)
            : this(new(normalLabel, normalIcon), new(progressLabel, progressIcon ?? normalIcon), style)
        { }
    }

}
