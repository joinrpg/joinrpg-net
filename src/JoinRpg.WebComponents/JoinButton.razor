@if (Link is not null)
{
    <a href="@Link"
      class="@style"
      type="@buttonType"
      disabled="@disabled"
      title="@Title"
    >
        @label
    </a>
    return;
}
<button 
    href="#"
    class="@style"
    @onclick="OnClickHappened"
    type="@buttonType"
    disabled="@disabled"
    title="@title"
        >
    @label
</button>
@code {
    [Parameter] public string? Link { get; set; }
    [Parameter] public VariationStyleEnum? Variation { get; set; }
    [Parameter] public SizeStyleEnum? Size { get; set; }
    [Parameter] public EventCallback<EventArgs> OnClick { get; set; }
    [Parameter] public bool Submit { get; set; } = false;
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public string? Title { get; set; } = null;
    /// <summary>
    /// Если Disabled=True и этот параметр установлен, то используется этот вариант Title
    /// </summary>
    [Parameter] public string? DisabledTitle { get; set; } = null;
    [Parameter] public ButtonPreset Preset { get; set; } = ButtonPreset.None;

    private string buttonType => Submit ? "submit" : "button";
    private string style => BootstrapStyle.Build("btn", variationResult, Size);
    private bool operationInProgress = false;
    private bool disabled => Disabled || operationInProgress;
    private string? title => Disabled ? (DisabledTitle ?? Title) : Title;

    private RenderFragment label => operationInProgress ? progressResult : labelResult;

    private RenderFragment labelResult = null!;
    private RenderFragment progressResult = null!;

    public VariationStyleEnum variationResult = default;

    [Parameter] public string? Label { get; set; }
    [Parameter] public string? ProgressText { get; set; }

    private async Task OnClickHappened(MouseEventArgs e)
    {
        if (disabled) { return; }
        await ConfirmHappened(e);
    }

    private async Task ConfirmHappened(EventArgs e)
    {
        operationInProgress = true;
        await OnClick.InvokeAsync(e);
        operationInProgress = false;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (Disabled)
        {
            OnClick = EventCallback<EventArgs>.Empty;
            Link = null;
        }

        if (Link is not null && OnClick.HasDelegate)
        {
            throw new InvalidOperationException("Нельзя установить одновременно обработчик OnClick и ссылку");
        }

        labelResult = SelectLabelFragment(Label, Presets[Preset]?.Label);
        progressResult = SelectLabelFragment(ProgressText, Presets[Preset]?.Progress);
        variationResult = Variation ?? Presets[Preset]?.Variation ?? VariationStyleEnum.None;
    }

    internal static RenderFragment FormatLabel(string label, string icon) => @<text><span class="glyphicon @icon"></span>&nbsp;@label</text>;

    internal static RenderFragment SelectLabelFragment(string? providedLabel, (string label, string? icon)? providedPreset)
    {
        return (providedLabel, providedPreset) switch
        {
            (string lbl, null) => @<text>@lbl</text>,
            (string lbl, (string label, string icon) preset) => FormatLabel(lbl, preset.icon),
            (null, (string label, string icon) preset) => FormatLabel(preset.label, preset.icon),
            (string lbl, (string label, null) preset) => @<text>@lbl</text>,
            (null, (string label, null) preset) => @<text>@preset.label</text>,
            _ => @<text>Не удалось отформатировать кнопку</text>
        };
    }

    private static ((string label, string? icon) Label, (string label, string? icon) Progress, VariationStyleEnum? Variation) CreatePreset(string label, string progress, string? icon = null, VariationStyleEnum? variation = null)
    {
        return ((label, icon), (progress, "glyphicon-hourglass"), variation);
    }

    // for tests
    internal readonly static Dictionary<ButtonPreset, ((string label, string? icon) Label, (string label, string? icon) Progress, VariationStyleEnum? Variation)?> Presets = new()
    {
        { ButtonPreset.Add, CreatePreset("Добавить", "Добавляем...", "glyphicon-plus", VariationStyleEnum.None) },
        { ButtonPreset.Cancel, CreatePreset("Отменить", "Отменяем...")},
        {ButtonPreset.Create, CreatePreset("Создать", "Создаем...", "glyphicon-ok", VariationStyleEnum.Success)},
        {ButtonPreset.Delete, CreatePreset("Удалить", "Удаляем...", "glyphicon-trash", VariationStyleEnum.Danger)},
        {ButtonPreset.Download, CreatePreset("Скачать", "Скачиваем...", "glyphicon-cloud-download")},
        {ButtonPreset.Update, CreatePreset("Обновить", "Обновляем...", "glyphicon-refresh")},
        {ButtonPreset.Hide, CreatePreset("Скрыть","Скрываем...", "glyphicon-remove-sign", VariationStyleEnum.Info)},
        {ButtonPreset.Restore, CreatePreset("Восстановить","Восстанавливаем...", icon: null, VariationStyleEnum.Success)},
        {ButtonPreset.Print, CreatePreset("Напечатать","Печатаем...", "glyphicon glyphicon-print", VariationStyleEnum.None)},
        {ButtonPreset.Email, CreatePreset("Написать","Отправляем письмо...", "glyphicon glyphicon-envelope", VariationStyleEnum.None)},
        {ButtonPreset.Publish, CreatePreset("Опубликовать","Публикуем...", "glyphicon-share-alt", VariationStyleEnum.Success)},
        {ButtonPreset.Copy, CreatePreset("Копировать","Копируем...", "glyphicon-duplicate", VariationStyleEnum.None)},
        {ButtonPreset.Up, CreatePreset("","", "glyphicon-arrow-up", VariationStyleEnum.None)},
        {ButtonPreset.Down, CreatePreset("","", "glyphicon-arrow-down", VariationStyleEnum.None)},
        {ButtonPreset.None, null}
    };
}
