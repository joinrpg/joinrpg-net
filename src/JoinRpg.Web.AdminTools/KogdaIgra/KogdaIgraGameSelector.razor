@inject IKogdaIgraSyncClient client

@if (items is null)
{
   <JoinLoadingMessage />
}
else
{
  <IntSelector
               Name="@Name"
                 SelectedValues="@Selected"
               SelectedValuesChanged="@HandleSelectedChanged"
               PossibleValues="items"
               Multiple="true"
               />
}

@code {

    [Parameter] public string? Name { get; set; } = null;
    [Parameter] public KogdaIgraIdentification[] KogdaIgraIds { get; set; } = [];
    [Parameter] public EventCallback<KogdaIgraIdentification[]> KogdaIgraIdsChanged { get; set; }

    [Parameter] public KogdaIgraShortViewModel[] KogdaIgras { get; set; } = [];
    [Parameter] public EventCallback<KogdaIgraShortViewModel[]> KogdaIgrasChanged { get; set; }
    [Parameter] public KogdaIgraShortViewModel[]? InitialList { get; set; }

    private int[] Selected { get; set; } = new int[0];
    private IntSelectListItem[] items = null!;
    private KogdaIgraShortViewModel[] itemModels = null!;

    protected override async Task OnInitializedAsync()
    {
        itemModels = InitialList ?? await client.GetKogdaIgraCandidates();
        items = itemModels
          .Select(master =>
            new IntSelectListItem(
              Value: master.KogdaIgraId,
              Text: master.Name,
              Subtext: "",
              ExtraSearch: ""))
           .ToArray();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        Selected = [.. KogdaIgraIds.Select(x => x.Value)];
    }

    private async Task HandleSelectedChanged(int[] values)
    {
        await KogdaIgraIdsChanged.InvokeAsync([.. values.Select(x => new KogdaIgraIdentification(x))]);
        await KogdaIgrasChanged.InvokeAsync([.. itemModels.Where(m => values.Contains(m.KogdaIgraId.Value))]);
    }
}
