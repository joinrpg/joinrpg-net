@using JoinRpg.Web.Models;
@using JoinRpg.DataModel;
@using JoinRpg.Helpers
@using JoinRpg.Web.Models.Money
@model ClaimFeeViewModel
@* All variables below are declared in claim.js *@
<script type="text/javascript">
    paymentStatus = @((int) Model.PaymentStatus);
    feeTotal = @(Model.CurrentTotalFee);
    feeBalance = @(Model.CurrentBalance);
    feeBase = @(Model.BaseFee);
</script>
<div id="feeInfo" class="collapse in">
    @await Html.PartialAsync("Money", new Money(Model.CurrentFee, "feeTotalDisp2"))
    <strong id="feeInfo0" style="display: none;">(оплачен полностью)</strong>
    <span id="feeInfo1" style="display: none;">(переплата <strong class="text-success">@await Html.PartialAsync("Money", new Money(Model.CurrentBalance - Model.CurrentTotalFee, "feeOverpaidDisp2"))</strong>)</span>
    <span id="feeInfo2" style="display: none;">(оплачено <strong class="text-success">@await Html.PartialAsync("Money", new Money(Model.CurrentBalance))</strong>, осталось оплатить <strong class="text-danger">@await Html.PartialAsync("Money", new Money(Model.CurrentTotalFee - Model.CurrentBalance, "feeMoreToPayDisp2"))</strong>)</span>
    <strong id="feeInfo3" style="display: none;" class="text-danger">(не оплачен)</strong>
    <button type="button" class="btn btn-default btn-xs" style="margin-right: 1em;" onclick="toggleFeeBlock();">Подробнее&hellip;</button>
    @if (Model.HasFeeAdminAccess && Model.CurrentBalance > 0)
    {
        <a class="btn btn-default btn-xs" href="@Url.Action("TransferClaimPayment", "Claim", new { projectId = Model.ProjectId, claimId = Model.ClaimId})">Перевести&hellip;</a>
    }
    @if (Model.ShowOnlinePaymentControls)
    {
        <button type="button" class="btn btn-default btn-xs" data-toggle="modal" data-target="#payOnlineDialog">Оплатить онлайн&hellip;</button>
    }
    @if (Model.HasSubmittablePaymentTypes)
    {
        <button type="button" class="btn btn-default btn-xs" data-toggle="modal" data-target="#submitPaymentDialog">Отметить оплату&hellip;</button>
    }
    @if (Model.PreferentialFeeRequestEnabled && !Model.HasMasterAccess)
    {
        <button type="button" class="btn btn-default btn-xs" data-toggle="modal" data-target="#requestPreferentialFeeDialog">Запросить льготу&hellip;</button>
    }
</div>
<div id="feeDetails" class="collapse">
    <button type="button" class="btn btn-default btn-xs" onclick="toggleFeeBlock();">Свернуть в компактный вид&hellip;</button>
    <table class="table table-condensed">
        <thead>
            <tr><th>Операция</th><th>Дата</th><th class="price-table">К оплате</th><th class="price-table">Оплачено</th><th></th></tr>
        </thead>
        <tbody>
        @await Html.PartialAsync("..\\Finances\\ClaimFinanceOperations\\_RowPartial", new FinanceOperationsRowViewModel
        {
            HtmlId = "rowBaseFee",
            Visible = Model.HasBaseFee || Model.HasFeeAdminAccess,
            Title = "Взнос"
                + (Model.PreferentialFeeUser ? " (льготник)" : "")
                + (Model.BaseFeeInfo != null ? " (действует с " + Model.BaseFeeInfo.StartDate.ToShortDateString() + ")" : ""),
            Fee = Model.BaseFee,
            AdminFunctions = new FinanceOperationAdminFunctionsViewModel(Model)
        })
        @await Html.PartialAsync("..\\Finances\\ClaimFinanceOperations\\_RowPartial", new FinanceOperationsRowViewModel
        {
            HtmlId = "rowAccommodationFee",
            Visible = Model.HasAccommodationFee,
            Title = "Проживание (" + Model.RoomType + (Model.RoomName != null ? ", комната " + Model.RoomName : "") + ")",
            Fee = Model.AccommodationFee,
            FeeHtmlId = "feeAccommodationDisp",
        })
        @await Html.PartialAsync("..\\Finances\\ClaimFinanceOperations\\_RowPartial", new FinanceOperationsRowViewModel
        {
            HtmlId = "rowClaimFee",
            Visible = Model.FieldsWithFeeCount[FieldBoundToViewModel.Claim] > 0,
            Title = "Опции заявки",
            Fee = Model.FieldsFee[FieldBoundToViewModel.Claim],
            FeeHtmlId = "feeClaimFieldsDisp",
        })
        @await Html.PartialAsync("..\\Finances\\ClaimFinanceOperations\\_RowPartial", new FinanceOperationsRowViewModel
        {
            HtmlId = "rowCharacterFee",
            Visible = Model.FieldsWithFeeCount[FieldBoundToViewModel.Character] > 0,
            Title = "Опции персонажа",
            Fee = Model.FieldsFee[FieldBoundToViewModel.Character],
            FeeHtmlId = "feeCharacterFieldsDisp",
        })
        @foreach (var fo in Model.VisibleFinanceOperations)
        {
            @await Html.PartialAsync("..\\Finances\\ClaimFinanceOperations\\_FinanceOperationRowPartial", fo)
        }
        </tbody>
        <tfoot>
            <tr>
                <th>Итого</th>
                <th></th>
                <th class="price-table">@await Html.PartialAsync("Money", new Money(Model.CurrentFee, "feeTotalDisp"))</th>
                <th class="price-table">@await Html.PartialAsync("Money", new Money(Model.CurrentBalance, "feeBalance"))</th>
                <th></th>
            </tr>
            <tr id="rowPaymentStatus">
                <th>
                    <span id="feeStatus0" style="display: none;">Оплачено полностью</span>
                    <span id="feeStatus1" style="display: none;">Переплата</span>
                    <span id="feeStatus2" style="display: none;">Осталось оплатить</span>
                    <span id="feeStatus3" style="display: none;">Осталось оплатить</span>
                </th>
                <th></th>
                <th class="price-table text-danger">@await Html.PartialAsync("Money", new Money(Model.CurrentTotalFee - Model.CurrentBalance, "feeMoreToPayDisp"))</th>
                <th class="price-table text-success">@await Html.PartialAsync("Money", new Money(Model.CurrentBalance - Model.CurrentTotalFee, "feeOverpaidDisp"))</th>
                <th>
                    @if (Model.HasFeeAdminAccess && Model.CurrentBalance > 0)
                    {
                        <a class="btn btn-default btn-xs" href="@Url.Action("TransferClaimPayment", "Claim", new { projectId = Model.ProjectId, claimId = Model.ClaimId})">Перевести&hellip;</a>
                    }
                    @if (Model.ShowOnlinePaymentControls)
                    {
                        <button type="button" class="btn btn-default btn-xs" data-toggle="modal" data-target="#payOnlineDialog">Оплатить онлайн&hellip;</button>
                    }
                    @if (Model.HasSubmittablePaymentTypes)
                    {
                        <button type="button" class="btn btn-default btn-xs" data-toggle="modal" data-target="#submitPaymentDialog">Отметить оплату&hellip;</button>
                    }
                </th>
            </tr>
            @if (Model.Balance[FinanceOperationState.Proposed] > 0)
            {
                <tr><th>@FinanceOperationStateViewModel.Proposed.GetDisplayName()</th><th></th><th></th><th class="price-table">@await Html.PartialAsync("Money", new Money(Model.Balance[FinanceOperationState.Proposed]))</th><th></th></tr>
            }
            @if (Model.Balance[FinanceOperationState.Declined] > 0)
            {
                <tr><th>@FinanceOperationStateViewModel.Declined.GetDisplayName()</th><th></th><th></th><th class="price-table">@await Html.PartialAsync("Money", new Money(Model.Balance[FinanceOperationState.Declined]))</th><th></th></tr>
            }
        </tfoot>
    </table>
</div>

<div class="modal fade" id="changeFeeModal" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            @using (Html.BeginForm("ChangeFee", "Claim", new { Model.ClaimId, Model.ProjectId }, FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title">Изменение суммы взноса</h4>
                </div>

                <div class="modal-body">
                    <div class="join alert alert-info">
                        <i class="glyphicon glyphicon-info-sign"></i>
                        <div>
                            <p>Размер взноса для этой заявки будет назначен вручную.</p>
                            <p>После этого взнос не будет больше зависеть от времени сдачи и&nbsp;будет зафиксирован.</p>
                        </div>
                    </div>
                    @if (Model.HasFieldsWithFee)
                    {
                        <div class="join alert alert-warning">
                            <i class="glyphicon glyphicon-exclamation-sign"></i>
                            Эта настройка меняет только базовое значение взноса. Итоговая сумма взноса складывается
                            из установленного вручную взноса и суммы модификаторов от полей.
                        </div>
                    }
                    <div class="form-horizontal">
                        <div class="form-group">
                            <div class="col-md-6 control-label"><label for="feeSpecialValue">Новый размер взноса:</label></div>
                            <div class="col-md-3">
                                <input type="text" class="form-control" id="feeSpecialValue" name="feeValue" list="feeVariants" value="@Model.BaseFee" />
                            </div>
                            <datalist id="feeVariants">
                                @foreach (var feeVariant in Model.FeeVariants)
                                {
                                    <option value="@feeVariant"></option>
                                }
                            </datalist>
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Отмена</button>
                    <button type="submit" class="btn btn-info">Изменить</button>
                </div>
            }
        </div>
    </div>
</div>

<div class="modal fade" id="markAsPreferential" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            @using (Html.BeginForm("MarkPreferential", "Claim", new { Model.ClaimId, Model.ProjectId }, FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                <input type="hidden" name="preferential" value="@(Model.PreferentialFeeUser ? "false" : "true")"/>
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title">Льготный взнос</h4>
                </div>

                <div class="modal-body">
                    <h4>Условия льготного взноса</h4>
                    @Model.PreferentialFeeConditions
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Отмена</button>
                    @if (Model.PreferentialFeeUser)
                    {
                        <button type="submit" class="btn btn-danger">Снять пометку льготника</button>
                    }
                    else
                    {
                        <button type="submit" class="btn btn-success">Пометить льготником</button>
                    }
                </div>
            }
        </div>
    </div>
</div>
