@using JetBrains.Annotations
@using Joinrpg.Markdown
@using JoinRpg.DataModel
@using JoinRpg.Domain
@using JoinRpg.Web.Models
@using JoinRpg.Web.Models.Accommodation
@using JoinRpg.Web.Models.CommonTypes
@model ClaimAccommodationViewModel

@if (!Model.AccommodationEnabledForClaim)
{
    return;
}

@functions

{

    [MustUseReturnValue]
    public static string CountOfX(int count, string single, string multi1, string multi2)
    {
        var selected = count == 0 ? multi2 : (count == 1 ? single : (count < 5 ? multi1 : multi2));
        return count + " " + @selected;
    }

}

<div class="panel panel-default" id="accommodationRequests">
    <div class="panel-heading">
        <h5>Проживание</h5>
    </div>
    <div class="panel-body">
        @if (Model.AccommodationRequest == null)
        {
            <span>Тип проживания не выбран.</span>
            <button class="btn btn-default btn-sm" type="submit" data-toggle="modal" data-target="#changeAccommodationType">
                Выбрать...
            </button>
        }
        else
        {
            var roomFreeSpace = 0;
            IReadOnlyCollection<User>
                neighbors;

            <span>
                @Model.AccommodationRequest.AccommodationType.Name <text>
                    (@CountOfX(Model.AccommodationRequest.AccommodationType.Capacity, "место",
                         "места", "мест") в номере, @Model.AccommodationRequest.AccommodationType.Cost &#8381;)
                </text>
            </span>
            <button class="btn btn-default btn-sm" type="submit" data-toggle="modal" data-target="#changeAccommodationType">
                Изменить...
            </button>
            <div class="help-block">
                @Model.AccommodationRequest.AccommodationType.Description.ToHtmlString()
            </div>
            if (Model.AccommodationRequest.Accommodation != null)
            {
                <hr />
                <span> Назначена комната: <b>@Model.AccommodationRequest.Accommodation.Name</b></span>

                neighbors = Model.AccommodationRequest.Accommodation.Inhabitants.SelectMany(i => i.Subjects).Where(s => s.ClaimId != Model.ClaimId).Select(c => c.Player).ToList();
                roomFreeSpace = Model.AccommodationRequest.Accommodation.GetRoomFreeSpace();
            }
            else
            {
                neighbors = Model.AccommodationRequest.Subjects.Where(s => s.ClaimId != Model.ClaimId).Select(c => c.Player).ToList();
                roomFreeSpace = Model.AccommodationRequest.AccommodationType.Capacity - neighbors.Count - 1;
            }

            if (roomFreeSpace > 0 || neighbors.Any())
            {
                <br />
                <b>Соседи по комнате:</b>
                <ul>
                    @foreach (var neighbor in neighbors)
                    {
                        <li>@Html.DisplayFor(model => neighbor)</li>
                    }
                    @if (roomFreeSpace > 0)
                    {
                        <li>@CountOfX(roomFreeSpace, " свободное место", "свободных места", "свободных мест")</li>
                    }
                </ul>
            }
            if (roomFreeSpace == 0)
            {
                <br />
                <b>Ваша комната полностью занята, послать новые приглашения невозможно</b>
            }

            if (!Model.PotentialNeighbors.Any() && roomFreeSpace > 0)
            {
                <br />
                <b>Потенциальных соседей не найдено</b>
          }


          if (Model.PotentialNeighbors.Any() && roomFreeSpace > 0)
          {
                <form asp-action="Invite" asp-controller="Claim" asp-route-projectId="@Model.ProjectId" asp-route-claimId="@Model.ClaimId" method="post">
                
                    @Html.Hidden("RequestId", Model.AccommodationRequest.Id)
                
                  @{ 
                      var alreadyGroupedNeighbors = Model.PotentialNeighbors
                      .Where(neighbor => neighbor.Type != NeighborType.Current && neighbor.AccommodationRequestId != null)
                      .GroupBy(neighbor => neighbor.AccommodationRequestId)
                      .Where(group => group.Count() <= roomFreeSpace)
                      .Select(neighborGroup =>
                      new ImprovedSelectListItem()
                      {
                        Value = InviteRequestViewModel.AccommodationRequestPrefix + neighborGroup.Key.ToString(),
                        Text = neighborGroup.Aggregate(string.Empty, (result, person) => result + (string.IsNullOrWhiteSpace(result) ? "" : ", ") + (string.IsNullOrWhiteSpace(person.UserName) ? person.ClaimName : person.UserName)),
                        ExtraSearch = neighborGroup.Aggregate(string.Empty, (result, person) => result + (string.IsNullOrWhiteSpace(result) ? "" : ", ") + (string.IsNullOrWhiteSpace(person.ClaimName) ? person.UserName : person.ClaimName)),
                        Subtext = neighborGroup.Count() > 1 ? "<br/>(группа проживающих)" : ""
                      });

                      var unGroupedNeighbors = Model.PotentialNeighbors
                      .Where(neighbor => neighbor.Type != NeighborType.Current && neighbor.AccommodationRequestId == null)
                      .Select(neighbor =>
                      new ImprovedSelectListItem()
                      {
                        Value = neighbor.ClaimId.ToString(),
                        Text = neighbor.UserName,
                        ExtraSearch = neighbor.ClaimName,
                        Subtext = "<br/>еще не выбрал тип проживания"
                      });


                      var selectableRows = alreadyGroupedNeighbors.Union(unGroupedNeighbors);
                    @Html.SearchableDropdown("ReceiverClaimOrAccommodationRequest", selectableRows)

                    <button type="button" class="btn btn-success btn-sm" data-toggle="modal" data-target="#sendInvite"><i class="glyphicon glyphicon-plus"></i>Пригласить</button>
                    @Html.ConfirmDialog("sendInvite", "Отправить приглашение на совместное проживание?", "Подтвердите действие", "Да", "Нет")
                      }
                </form>
            }
        }
    </div>
</div>
@await Html.PartialAsync("_ClaimIncomingInvites", Model)
@await Html.PartialAsync("_ClaimOutgoingInvites", Model)

@await Html.PartialAsync("_ClaimAccommodationTypeChange", Model)
