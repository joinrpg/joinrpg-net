@using System.ComponentModel
@using JoinRpg.Web.App_Code
@using JoinRpg.Web.Models
@model FieldValueViewModel

@helper ShowOptions()
    {
        foreach (var val in Model.PossibleValueList)
        {
            Html.RenderPartial("EditorTemplates/_SelectOptionPartial", val);
        }
}
@helper ValidationMessage()
    {
            <span class="field-validation-valid text-danger" data-valmsg-for="@Model.FieldClientId" data-valmsg-replace="true"></span>
}

@helper ShowDescription()
    {
        var hideClassName = !Model.IsPlayerVisible ? "world-object-hidden" : "";
        if (!string.IsNullOrWhiteSpace(Model.Description.ToString()))
        {
            <div class="help-block @hideClassName">
                @Model.Description
            </div>
        }

        if (!string.IsNullOrWhiteSpace(Model.MasterDescription.ToString()))
        {
            <div class="help-block world-object-hidden">
                @Model.MasterDescription
            </div>
        }
}

@{ var hideClassName = !Model.IsPlayerVisible ? "world-object-hidden" : ""; }

@if (Model.FieldViewType == ProjectFieldViewType.Header)
{
    <h4 class="@hideClassName">@Model.FieldName</h4>
    @ShowDescription()
    return;
}

<div class="form-group @hideClassName">
    <label class="control-label col-md-2">
        @if (Model.IsDeleted)
        {
            <del>@Model.FieldName</del>
        }
        else
        {
            @Model.FieldName
        }

        @Html.DisplayFor(model => model.MandatoryStatus)
        @if (ViewBag.HideCharacterClaimFieldsIcon != true)
        {<text>&nbsp;</text>
        if (Model.FieldBound == FieldBoundToViewModel.Claim)
        {
            <span class="label label-primary" title="Это поле привязано к заявке и сохранится при смене игроком роли">И</span>
        }
        if (Model.FieldBound == FieldBoundToViewModel.Character)
        {
            <span class="label label-success" title="Это поле привязано к персонажу и сохранится при смене игрока">П</span>
        }
    }
    </label>
    <div class="col-md-8">
        @{
            bool isEmpty = string.IsNullOrWhiteSpace(Model.Value);
            Dictionary<string, string> attrs = new Dictionary<string, string>()
            {
                { "id", Model.FieldClientId },
                { "name", Model.FieldClientId },
                { "bound", Model.FieldBound.ToString() },
                { "class", "form-control" }
            };

            if (Model.HasPrice)
            {
                attrs["price"] = Model.Price.ToString();
                if (Model.FieldViewType == ProjectFieldViewType.Number)
                {
                    attrs["class"] += " price";
                    attrs["min"] = "0";
                }
            }

            switch (Model.FieldViewType)
            {
                case ProjectFieldViewType.Text:
                    attrs["rows"] = "4";
                    attrs["cols"] = "100";
                    break;
                case ProjectFieldViewType.MultiSelect:
                    attrs["multiple"] = "true";
                    break;
                case ProjectFieldViewType.Checkbox:
                    attrs.Remove("class");
                    if (Model.IsCheckboxSet())
                    {
                        attrs["checked"] = "true";
                    }
                    break;
            }

            switch (Model.MandatoryStatus)
            {
                case MandatoryStatusViewType.Optional:
                    break;
                case MandatoryStatusViewType.Recommended:
                    //TODO improve
                    break;
                case MandatoryStatusViewType.Required:
                    attrs["data-val"] = "true";
                    attrs["data-val-required"] = "Необходимо заполнить поле";
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }

        @switch (Model.FieldViewType)
        {
            case ProjectFieldViewType.Text:
                <textarea @Html.RenderAttrs(attrs)>@(Model == null ? "" : Model.Value)</textarea>
                break;
            case ProjectFieldViewType.Dropdown:
                <select onchange="selectChanged(event)" @Html.RenderAttrs(attrs)>
                    @if (isEmpty || Model.MandatoryStatus != MandatoryStatusViewType.Required)
                    {
                        Html.RenderPartial("EditorTemplates/_SelectOptionDefPartial", Model);
                    }
                    @ShowOptions()
                </select>
                break;
            case ProjectFieldViewType.String:
                <input type="text" @Html.RenderAttrs(attrs) value="@Model.Value" />
                break;
            case ProjectFieldViewType.Login:
                <input type="text" @Html.RenderAttrs(attrs) value="@Model.Value"
                       data-val-regex="Это поле должно состоять из латинских букв и цифр, и начинаться с латинской буквы"
                       data-val-regex-pattern="^[a-zA-Z][a-zA-Z0-9]*$" data-val="true"/>
                break;
            case ProjectFieldViewType.Number:
                <div class="form-control-complex">
                    <div class="form-control-left"><input type="number" onchange="numberChanged(event)" @Html.RenderAttrs(attrs) value="@Model.Value" /></div>
                    @if (Model.HasPrice)
                    {
                        <span class="form-control-right price-base">Цена за 1 единицу измерения: @Html.RenderPriceElement(Model.Price, Model.FieldClientId + "_baseprice")</span>
                    }
                </div>
                break;

            case ProjectFieldViewType.Checkbox:
                <div class="form-control-complex">
                    <label for="@Model.FieldClientId" class="form-control-left">
                        <input type="checkbox" onchange="checkChanged(event)" @Html.RenderAttrs(attrs) />
                        <input name="@Model.FieldClientId" type="hidden" value="false" />
                        @Model.Description
                    </label>
                    @if (Model.HasPrice)
                    {
                        <span class="form-control-right price-base">Цена: @Html.RenderPriceElement(Model.Price, Model.FieldClientId + "_baseprice")</span>
                    }
                </div>
                break;

            case ProjectFieldViewType.MultiSelect:
                <select onchange="multiChanged(event)" @Html.RenderAttrs(attrs)>
                    @if (isEmpty || Model.MandatoryStatus != MandatoryStatusViewType.Required)
                    {
                        Html.RenderPartial("EditorTemplates/_SelectOptionDefPartial", Model);
                    }
                    @ShowOptions()
                </select>
                <p class="help-block">Используйте Ctrl, чтобы выбрать несколько значений.</p>
                break;
            default:
                throw new InvalidEnumArgumentException("Unknown field type name");
        }
        @ValidationMessage()
        @if (Model.HasMasterAccess)
        {
            @Html.Raw(
                        string.Join(" • ",
                          Model.ValueList
                            .Where(v => v.SpecialGroupId != null)
                            .Select(value => Html.ActionLink(value.Label, "Details", "GameGroups", new { Model.ProjectId, CharacterGroupId = value.SpecialGroupId }, null))))
        }
        @if (Model.FieldViewType != ProjectFieldViewType.Checkbox)
        {
            @ShowDescription()
        }
        @Html.ValidationMessageFor(model => model.Value, "", new { @class = "text-danger" })
    </div>

    <div class="col-md-2 price-table">
        @if (Model.HasPrice)
        {
            @Html.RenderPriceElement(Model.Fee, Model.FieldClientId + "_disp");
        }
    </div>

</div>
